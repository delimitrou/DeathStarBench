// Code generated by protoc-gen-go. DO NOT EDIT.
// source: reservation.proto

package reservation

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	CustomerName string   `protobuf:"bytes,1,opt,name=customerName,proto3" json:"customerName,omitempty"`
	HotelId      []string `protobuf:"bytes,2,rep,name=hotelId,proto3" json:"hotelId,omitempty"`
	InDate       string   `protobuf:"bytes,3,opt,name=inDate,proto3" json:"inDate,omitempty"`
	OutDate      string   `protobuf:"bytes,4,opt,name=outDate,proto3" json:"outDate,omitempty"`
	RoomNumber   int32    `protobuf:"varint,5,opt,name=roomNumber,proto3" json:"roomNumber,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetCustomerName() string {
	if m != nil {
		return m.CustomerName
	}
	return ""
}

func (m *Request) GetHotelId() []string {
	if m != nil {
		return m.HotelId
	}
	return nil
}

func (m *Request) GetInDate() string {
	if m != nil {
		return m.InDate
	}
	return ""
}

func (m *Request) GetOutDate() string {
	if m != nil {
		return m.OutDate
	}
	return ""
}

func (m *Request) GetRoomNumber() int32 {
	if m != nil {
		return m.RoomNumber
	}
	return 0
}

type Result struct {
	HotelId []string `protobuf:"bytes,1,rep,name=hotelId,proto3" json:"hotelId,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Result) GetHotelId() []string {
	if m != nil {
		return m.HotelId
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "reservation.Request")
	proto.RegisterType((*Result)(nil), "reservation.Result")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReservationClient is the client API for Reservation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReservationClient interface {
	// MakeReservation makes a reservation based on given information
	MakeReservation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error)
	// CheckAvailability checks if given information is available
	CheckAvailability(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error)
}

type reservationClient struct {
	cc *grpc.ClientConn
}

func NewReservationClient(cc *grpc.ClientConn) ReservationClient {
	return &reservationClient{cc}
}

func (c *reservationClient) MakeReservation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/reservation.Reservation/MakeReservation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationClient) CheckAvailability(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/reservation.Reservation/CheckAvailability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReservationServer is the server API for Reservation service.
type ReservationServer interface {
	// MakeReservation makes a reservation based on given information
	MakeReservation(context.Context, *Request) (*Result, error)
	// CheckAvailability checks if given information is available
	CheckAvailability(context.Context, *Request) (*Result, error)
}

func RegisterReservationServer(s *grpc.Server, srv ReservationServer) {
	s.RegisterService(&_Reservation_serviceDesc, srv)
}

func _Reservation_MakeReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServer).MakeReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reservation.Reservation/MakeReservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServer).MakeReservation(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reservation_CheckAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServer).CheckAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reservation.Reservation/CheckAvailability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServer).CheckAvailability(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Reservation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "reservation.Reservation",
	HandlerType: (*ReservationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeReservation",
			Handler:    _Reservation_MakeReservation_Handler,
		},
		{
			MethodName: "CheckAvailability",
			Handler:    _Reservation_CheckAvailability_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reservation.proto",
}

func init() { proto.RegisterFile("reservation.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 228 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0xc1, 0x4a, 0x03, 0x31,
	0x18, 0x84, 0x89, 0xb5, 0x5b, 0xfa, 0x57, 0x90, 0x46, 0x91, 0xe0, 0x41, 0x96, 0x9c, 0xf6, 0xd4,
	0x83, 0x5e, 0x45, 0x10, 0xbd, 0x78, 0xb0, 0x87, 0xbc, 0x41, 0xb6, 0xfe, 0xd0, 0xd0, 0xa4, 0xbf,
	0x26, 0x7f, 0x0a, 0x3e, 0x83, 0x4f, 0xe0, 0xdb, 0x8a, 0xa1, 0xc5, 0xac, 0xb7, 0x1e, 0xe7, 0x1b,
	0x86, 0x61, 0x06, 0xe6, 0x11, 0x13, 0xc6, 0x9d, 0x65, 0x47, 0xdb, 0xc5, 0x7b, 0x24, 0x26, 0x39,
	0xab, 0x90, 0xfe, 0x16, 0x30, 0x31, 0xf8, 0x91, 0x31, 0xb1, 0xd4, 0x70, 0xb6, 0xca, 0x89, 0x29,
	0x60, 0x5c, 0xda, 0x80, 0x4a, 0xb4, 0xa2, 0x9b, 0x9a, 0x01, 0x93, 0x0a, 0x26, 0x6b, 0x62, 0xf4,
	0x2f, 0x6f, 0xea, 0xa4, 0x1d, 0x75, 0x53, 0x73, 0x90, 0xf2, 0x0a, 0x1a, 0xb7, 0x7d, 0xb6, 0x8c,
	0x6a, 0x54, 0x72, 0x7b, 0xf5, 0x9b, 0xa0, 0xcc, 0xc5, 0x38, 0x2d, 0xc6, 0x41, 0xca, 0x1b, 0x80,
	0x48, 0x14, 0x96, 0x39, 0xf4, 0x18, 0xd5, 0xb8, 0x15, 0xdd, 0xd8, 0x54, 0x44, 0x6b, 0x68, 0x0c,
	0xa6, 0xec, 0xb9, 0x6e, 0x15, 0x83, 0xd6, 0xdb, 0x2f, 0x01, 0x33, 0xf3, 0xb7, 0x47, 0xde, 0xc3,
	0xf9, 0xab, 0xdd, 0x60, 0x8d, 0x2e, 0x17, 0xf5, 0x07, 0xfb, 0xb1, 0xd7, 0x17, 0xff, 0x68, 0xe9,
	0x79, 0x80, 0xf9, 0xd3, 0x1a, 0x57, 0x9b, 0xc7, 0x9d, 0x75, 0xde, 0xf6, 0xce, 0x3b, 0xfe, 0x3c,
	0x22, 0xdf, 0x37, 0xe5, 0xe1, 0xbb, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xed, 0x89, 0xb3, 0x61,
	0x76, 0x01, 0x00, 0x00,
}
