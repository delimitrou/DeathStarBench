// Code generated by protoc-gen-go. DO NOT EDIT.
// source: recommendation.proto

package recommendation

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The requirement of the recommendation.
type Request struct {
	Require string  `protobuf:"bytes,1,opt,name=require" json:"require,omitempty"`
	Lat     float64 `protobuf:"fixed64,2,opt,name=lat" json:"lat,omitempty"`
	Lon     float64 `protobuf:"fixed64,3,opt,name=lon" json:"lon,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetRequire() string {
	if m != nil {
		return m.Require
	}
	return ""
}

func (m *Request) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Request) GetLon() float64 {
	if m != nil {
		return m.Lon
	}
	return 0
}

type Result struct {
	HotelIds []string `protobuf:"bytes,1,rep,name=HotelIds" json:"HotelIds,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Result) GetHotelIds() []string {
	if m != nil {
		return m.HotelIds
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "recommendation.Request")
	proto.RegisterType((*Result)(nil), "recommendation.Result")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RecommendationClient is the client API for Recommendation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecommendationClient interface {
	// GetRecommendations returns recommended hotels for a given requirement
	GetRecommendations(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error)
}

type recommendationClient struct {
	cc *grpc.ClientConn
}

func NewRecommendationClient(cc *grpc.ClientConn) RecommendationClient {
	return &recommendationClient{cc}
}

func (c *recommendationClient) GetRecommendations(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/recommendation.Recommendation/GetRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecommendationServer is the server API for Recommendation service.
type RecommendationServer interface {
	// GetRecommendations returns recommended hotels for a given requirement
	GetRecommendations(context.Context, *Request) (*Result, error)
}

func RegisterRecommendationServer(s *grpc.Server, srv RecommendationServer) {
	s.RegisterService(&_Recommendation_serviceDesc, srv)
}

func _Recommendation_GetRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServer).GetRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recommendation.Recommendation/GetRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServer).GetRecommendations(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Recommendation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "recommendation.Recommendation",
	HandlerType: (*RecommendationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecommendations",
			Handler:    _Recommendation_GetRecommendations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recommendation.proto",
}

func init() { proto.RegisterFile("recommendation.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 173 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x8f, 0x31, 0xcf, 0x82, 0x40,
	0x0c, 0x40, 0x73, 0x1f, 0x09, 0x7c, 0x74, 0x20, 0xa6, 0x31, 0x7a, 0x61, 0x22, 0xc4, 0x81, 0x89,
	0x41, 0x7f, 0x83, 0x41, 0xd7, 0x5b, 0x9c, 0x51, 0x3a, 0x90, 0xc0, 0x55, 0xee, 0xca, 0xff, 0x37,
	0x10, 0x34, 0x41, 0xb7, 0xbe, 0xd7, 0xa1, 0xaf, 0xb0, 0x75, 0xf4, 0xe0, 0xbe, 0x27, 0xdb, 0xd4,
	0xd2, 0xb2, 0x2d, 0x9f, 0x8e, 0x85, 0x31, 0x59, 0xdb, 0xbc, 0x82, 0xc8, 0xd0, 0x30, 0x92, 0x17,
	0xd4, 0x10, 0x39, 0x1a, 0xc6, 0xd6, 0x91, 0x56, 0x99, 0x2a, 0x62, 0xf3, 0x46, 0xdc, 0x40, 0xd0,
	0xd5, 0xa2, 0xff, 0x32, 0x55, 0x28, 0x33, 0x8d, 0xb3, 0x61, 0xab, 0x83, 0xc5, 0xb0, 0xcd, 0x0f,
	0x10, 0x1a, 0xf2, 0x63, 0x27, 0x98, 0xc2, 0xff, 0x85, 0x85, 0xba, 0x6b, 0xe3, 0xb5, 0xca, 0x82,
	0x22, 0x36, 0x1f, 0x3e, 0xde, 0x20, 0x31, 0xab, 0x00, 0x3c, 0x03, 0x56, 0x24, 0x6b, 0xe9, 0x71,
	0x5f, 0x7e, 0xd5, 0x2f, 0x91, 0xe9, 0xee, 0x77, 0x31, 0x1d, 0xbd, 0x87, 0xf3, 0x7b, 0xa7, 0x57,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x11, 0x5f, 0xf9, 0xa7, 0xf6, 0x00, 0x00, 0x00,
}
